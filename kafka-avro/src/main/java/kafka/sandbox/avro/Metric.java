/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.sandbox.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Metric extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1792841648656520953L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Metric\",\"namespace\":\"kafka.sandbox.avro\",\"fields\":[{\"name\":\"metricId\",\"type\":\"string\"},{\"name\":\"metricType\",\"type\":{\"type\":\"enum\",\"name\":\"MetricType\",\"symbols\":[\"TIMER\",\"COUNTER\"],\"default\":\"TIMER\"}},{\"name\":\"metric\",\"type\":[{\"type\":\"record\",\"name\":\"TimerMetric\",\"fields\":[{\"name\":\"avg\",\"type\":\"double\"}],\"version\":\"1\"},{\"type\":\"record\",\"name\":\"CounterMetric\",\"fields\":[{\"name\":\"count\",\"type\":\"long\"}],\"version\":\"1\"}]}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Metric> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Metric> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Metric> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Metric> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Metric> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Metric to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Metric from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Metric instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Metric fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence metricId;
  private kafka.sandbox.avro.MetricType metricType;
  private java.lang.Object metric;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Metric() {}

  /**
   * All-args constructor.
   * @param metricId The new value for metricId
   * @param metricType The new value for metricType
   * @param metric The new value for metric
   */
  public Metric(java.lang.CharSequence metricId, kafka.sandbox.avro.MetricType metricType, java.lang.Object metric) {
    this.metricId = metricId;
    this.metricType = metricType;
    this.metric = metric;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return metricId;
    case 1: return metricType;
    case 2: return metric;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: metricId = (java.lang.CharSequence)value$; break;
    case 1: metricType = (kafka.sandbox.avro.MetricType)value$; break;
    case 2: metric = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'metricId' field.
   * @return The value of the 'metricId' field.
   */
  public java.lang.CharSequence getMetricId() {
    return metricId;
  }


  /**
   * Sets the value of the 'metricId' field.
   * @param value the value to set.
   */
  public void setMetricId(java.lang.CharSequence value) {
    this.metricId = value;
  }

  /**
   * Gets the value of the 'metricType' field.
   * @return The value of the 'metricType' field.
   */
  public kafka.sandbox.avro.MetricType getMetricType() {
    return metricType;
  }


  /**
   * Sets the value of the 'metricType' field.
   * @param value the value to set.
   */
  public void setMetricType(kafka.sandbox.avro.MetricType value) {
    this.metricType = value;
  }

  /**
   * Gets the value of the 'metric' field.
   * @return The value of the 'metric' field.
   */
  public java.lang.Object getMetric() {
    return metric;
  }


  /**
   * Sets the value of the 'metric' field.
   * @param value the value to set.
   */
  public void setMetric(java.lang.Object value) {
    this.metric = value;
  }

  /**
   * Creates a new Metric RecordBuilder.
   * @return A new Metric RecordBuilder
   */
  public static kafka.sandbox.avro.Metric.Builder newBuilder() {
    return new kafka.sandbox.avro.Metric.Builder();
  }

  /**
   * Creates a new Metric RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Metric RecordBuilder
   */
  public static kafka.sandbox.avro.Metric.Builder newBuilder(kafka.sandbox.avro.Metric.Builder other) {
    if (other == null) {
      return new kafka.sandbox.avro.Metric.Builder();
    } else {
      return new kafka.sandbox.avro.Metric.Builder(other);
    }
  }

  /**
   * Creates a new Metric RecordBuilder by copying an existing Metric instance.
   * @param other The existing instance to copy.
   * @return A new Metric RecordBuilder
   */
  public static kafka.sandbox.avro.Metric.Builder newBuilder(kafka.sandbox.avro.Metric other) {
    if (other == null) {
      return new kafka.sandbox.avro.Metric.Builder();
    } else {
      return new kafka.sandbox.avro.Metric.Builder(other);
    }
  }

  /**
   * RecordBuilder for Metric instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Metric>
    implements org.apache.avro.data.RecordBuilder<Metric> {

    private java.lang.CharSequence metricId;
    private kafka.sandbox.avro.MetricType metricType;
    private java.lang.Object metric;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.sandbox.avro.Metric.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.metricId)) {
        this.metricId = data().deepCopy(fields()[0].schema(), other.metricId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.metricType)) {
        this.metricType = data().deepCopy(fields()[1].schema(), other.metricType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.metric)) {
        this.metric = data().deepCopy(fields()[2].schema(), other.metric);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Metric instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.sandbox.avro.Metric other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.metricId)) {
        this.metricId = data().deepCopy(fields()[0].schema(), other.metricId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.metricType)) {
        this.metricType = data().deepCopy(fields()[1].schema(), other.metricType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.metric)) {
        this.metric = data().deepCopy(fields()[2].schema(), other.metric);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'metricId' field.
      * @return The value.
      */
    public java.lang.CharSequence getMetricId() {
      return metricId;
    }


    /**
      * Sets the value of the 'metricId' field.
      * @param value The value of 'metricId'.
      * @return This builder.
      */
    public kafka.sandbox.avro.Metric.Builder setMetricId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.metricId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'metricId' field has been set.
      * @return True if the 'metricId' field has been set, false otherwise.
      */
    public boolean hasMetricId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'metricId' field.
      * @return This builder.
      */
    public kafka.sandbox.avro.Metric.Builder clearMetricId() {
      metricId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'metricType' field.
      * @return The value.
      */
    public kafka.sandbox.avro.MetricType getMetricType() {
      return metricType;
    }


    /**
      * Sets the value of the 'metricType' field.
      * @param value The value of 'metricType'.
      * @return This builder.
      */
    public kafka.sandbox.avro.Metric.Builder setMetricType(kafka.sandbox.avro.MetricType value) {
      validate(fields()[1], value);
      this.metricType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'metricType' field has been set.
      * @return True if the 'metricType' field has been set, false otherwise.
      */
    public boolean hasMetricType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'metricType' field.
      * @return This builder.
      */
    public kafka.sandbox.avro.Metric.Builder clearMetricType() {
      metricType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'metric' field.
      * @return The value.
      */
    public java.lang.Object getMetric() {
      return metric;
    }


    /**
      * Sets the value of the 'metric' field.
      * @param value The value of 'metric'.
      * @return This builder.
      */
    public kafka.sandbox.avro.Metric.Builder setMetric(java.lang.Object value) {
      validate(fields()[2], value);
      this.metric = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'metric' field has been set.
      * @return True if the 'metric' field has been set, false otherwise.
      */
    public boolean hasMetric() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'metric' field.
      * @return This builder.
      */
    public kafka.sandbox.avro.Metric.Builder clearMetric() {
      metric = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Metric build() {
      try {
        Metric record = new Metric();
        record.metricId = fieldSetFlags()[0] ? this.metricId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.metricType = fieldSetFlags()[1] ? this.metricType : (kafka.sandbox.avro.MetricType) defaultValue(fields()[1]);
        record.metric = fieldSetFlags()[2] ? this.metric :  defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Metric>
    WRITER$ = (org.apache.avro.io.DatumWriter<Metric>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Metric>
    READER$ = (org.apache.avro.io.DatumReader<Metric>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










